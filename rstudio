#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail
# set -o xtrace # for debugging

function main() {
	local local_directory=$(realpath ${1:-"$(pwd)"})

	local container_name=$(container_name "${local_directory}")

	if container_is_exited "${container_name}"; then
		print_green "Starting existing container ${container_name}"
		local container_id=$(docker start "${container_name}")
	elif container_is_running "${container_name}"; then
		print_green "Found running container ${container_name}"
		local container_id="${container_name}"
	else
		print_green "Starting new container ${container_name}"
		local container_id=$(run_container "${local_directory}" "${container_name}")
	fi

	local container_port=$(get_container_port "${container_id}")

	open_browser_when_ready ${container_port} &

	docker attach ${container_id}
}

function container_name() {
	local local_directory="${1}"

	local hash=$(get_partial_hash "${local_directory}")
	local directory_name=$(basename ${local_directory})
	echo "rstudio-${directory_name}-${hash}"
}

function run_container() {
	local local_directory=${1}
	local container_name=${2}

	local directory_name=$(basename "${local_directory}")
	docker run -d \
			-e DISABLE_AUTH=true  \
			-v "${local_directory}:/home/rstudio/${directory_name}" \
			-p 127.0.0.1:0:8787 \
			--name "${container_name}" \
			rocker/tidyverse:latest
}

function get_container_port() {
	local container_id=${1}
	local container_port=$( \
		docker \
			inspect \
			--format '{{ (index (index .NetworkSettings.Ports "8787/tcp") 0).HostPort }}' \
			${container_id}
	)
	echo ${container_port}
}

function get_partial_hash() {
	local input="${1}"

	local hash=$(echo -n "${input}" | sha1sum)
	echo "${hash:0:19}"
}

function open_browser_when_ready() {
	local container_port=${1}

	until nc -z localhost ${container_port}  &> /dev/null; do sleep 1; done
	xdg-open "http://localhost:${container_port}"
}

function container_is_exited() {
	local container_name=${1}
	container_is_in_status "${container_name}" "Exited"
}

function container_is_running() {
	local container_name=${1}
	container_is_in_status "${container_name}" "Up"
}

function container_is_in_status() {
	local container_name=${1}
	local status=${2}

	local status=$(docker container ls --all --format='{{.Status}}' --filter="name=${container_name}" | grep --count ${status})

	(( ${status} > 0 ))
}

function print_green() {
	echo -e "\e[32m${1}\e[0m"
}

main "$@"